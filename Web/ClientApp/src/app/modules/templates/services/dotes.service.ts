import { Injectable } from '@angular/core';
import { TagValue } from 'src/app/models/tag-value.model';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { NzNotificationService } from 'ng-zorro-antd';
import { Observable, throwError, of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { saveAs } from 'file-saver';
import { Tag } from 'src/app/models/tag.model';

const url = '/api/dotes';

@Injectable({
  providedIn: 'root'
})
export class DotesService {
  headers: HttpHeaders;

  constructor(private http: HttpClient, private message: NzNotificationService) {
    this.headers = new HttpHeaders()
      .set('Content-Type', 'application/json')
      .set('Authorization', `bearer ${localStorage.getItem('auth_template_token')}`);
  }

  generateDocument(id: string, tags: TagValue[], name: string, fileName: string) {
    const endpoint = `${url}/GenerateDocument`;

    return this.http
      .post<any>(endpoint, { templateId: id, tags: tags }, { headers: this.headers })
      .subscribe(
        (result) => {
          if (result) {
            saveAs(this.base64ToBlob(result.documentBody, 'application/docx'), `Document generated by template_${name}_file_${fileName}`);
          }
        },
        (error) => this.message.create('error', `Can't download file`, '')
      );
  }  

  private handleError<T>(operation = 'operation', result?: T, withContinueThrow = false) {
    return (error: any): Observable<T> => {
      console.error(error);
      this.message.error('Error', error.message);
      console.log(`${operation} failed: ${error.message}`);
      return withContinueThrow ? throwError(error) : of(result as T);
    };
  }

  private base64ToBlob(b64Data, contentType = '', sliceSize = 512) {
    b64Data = b64Data.replace(/\s/g, '');
    const byteCharacters = atob(b64Data);
    const byteArrays = [];
    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
      const slice = byteCharacters.slice(offset, offset + sliceSize);

      const byteNumbers = new Array(slice.length);
      for (let i = 0; i < slice.length; i++) {
        byteNumbers[i] = slice.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      byteArrays.push(byteArray);
    }
    return new Blob(byteArrays, { type: contentType });
  }
}
